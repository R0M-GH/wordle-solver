{"version":3,"sources":["words.txt","components/Word.jsx","components/Instructions.jsx","App.js","index.js"],"names":["module","exports","__webpack_require__","p","Word","props","letters","i","tmp","words","index","value","charAt","color","push","boxes","map","letter","react_default","a","createElement","Box","m","Button","style","fontSize","backgroundColor","maxWidth","maxHeight","minWidth","minHeight","margin","onClick","Object","toConsumableArray","setWords","handleClick","display","alignItems","justifyContent","Instructions","BootstrapDialog","styled","Dialog","_ref","theme","& .MuiDialogContent-root","padding","spacing","& .MuiDialogActions-root","BootstrapDialogTitle","children","onClose","other","objectWithoutProperties","DialogTitle","assign","sx","IconButton","aria-label","position","right","top","palette","grey","Close_default","_React$useState","React","useState","_React$useState2","slicedToArray","open","setOpen","handleClose","Box_Box","flexGrow","AppBar","Toolbar","Typography","variant","component","aria-labelledby","id","DialogContent","dividers","gutterBottom","DialogActions","autoFocus","allWords","fetch","raw","then","r","text","split","App","_useState","_useState2","green","yellow","gray","wo","word","className","textAlign","t","forEach","j","g","length","includes","populateColors","b","y","w","concat","disableElevation","window","location","reload","ReactDOM","render","StrictMode","src_App","document","getElementById"],"mappings":"mGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,2JCIzB,SAASC,EAAKC,GAE3B,IADA,IAAIC,EAAU,GACLC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAIC,EAAM,CAACH,EAAMI,MAAMJ,EAAMK,OAAOC,MAAMC,OAAOL,IACR,GAArCF,EAAMI,MAAMJ,EAAMK,OAAOG,MAAMN,GACjCC,EAAIM,KAAK,QACqC,GAArCT,EAAMI,MAAMJ,EAAMK,OAAOG,MAAMN,GACxCC,EAAIM,KAAK,UAETN,EAAIM,KAAK,SAEXN,EAAIM,KAAKP,GACTD,EAAQQ,KAAKN,GAWf,IAAMO,EAAQT,EAAQU,IAAI,SAACC,GAAD,OACxBC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKC,EAAG,GACNJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CACEC,MAAO,CACLC,SAAU,OACVZ,MAAO,QACPa,gBAAiBT,EAAO,GACxBU,SAAU,QACVC,UAAW,QACXC,SAAU,QACVC,UAAW,QACXC,OAAQ,KAEVC,QAAS,kBAtBf,SAAqBzB,GACnB,IAAIC,EAAGyB,OAAAC,EAAA,EAAAD,CAAO5B,EAAMI,OACa,GAA7BD,EAAIH,EAAMK,OAAOG,MAAMN,GACzBC,EAAIH,EAAMK,OAAOG,MAAMN,GAAK,EAE5BC,EAAIH,EAAMK,OAAOG,MAAMN,IAAM,EAE/BF,EAAM8B,SAAS3B,GAeI4B,CAAYnB,EAAO,MAEjCA,EAAO,OAKd,OACEC,EAAAC,EAAAC,cAAA,OACEI,MAAO,CACLa,QAAS,OACTC,WAAY,SACZC,eAAgB,WAGjBxB,0HCxCQ,SAASyB,IACtB,IAAMC,EAAkBC,YAAOC,IAAPD,CAAe,SAAAE,GAAA,IAAGC,EAAHD,EAAGC,MAAH,MAAgB,CACrDC,2BAA4B,CAC1BC,QAASF,EAAMG,QAAQ,IAEzBC,2BAA4B,CAC1BF,QAASF,EAAMG,QAAQ,OAIrBE,EAAuB,SAAC7C,GAAU,IAC9B8C,EAAgC9C,EAAhC8C,SAAUC,EAAsB/C,EAAtB+C,QAAYC,EADQpB,OAAAqB,EAAA,EAAArB,CACE5B,EADF,wBAGtC,OACEa,EAAAC,EAAAC,cAACmC,EAAA,EAADtB,OAAAuB,OAAA,CAAaC,GAAI,CAAEnC,EAAG,EAAGnB,EAAG,IAASkD,GAClCF,EACAC,EACClC,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CACEC,aAAW,QACX3B,QAASoB,EACTK,GAAI,CACFG,SAAU,WACVC,MAAO,EACPC,IAAK,EACLjD,MAAO,SAACgC,GAAD,OAAWA,EAAMkB,QAAQC,KAAK,QAGvC9C,EAAAC,EAAAC,cAAC6C,EAAA9C,EAAD,OAEA,OA7B2B+C,EAsCbC,IAAMC,UAAS,GAtCFC,EAAApC,OAAAqC,EAAA,EAAArC,CAAAiC,EAAA,GAsC9BK,EAtC8BF,EAAA,GAsCxBG,EAtCwBH,EAAA,GAwC/BI,EAAc,WAClBD,GAAQ,IAKV,OACEtD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACsD,EAAA,EAAD,CAAKjB,GAAI,CAAEkB,SAAU,IACnBzD,EAAAC,EAAAC,cAACwD,EAAA,EAAD,CAAQhB,SAAS,UACf1C,EAAAC,EAAAC,cAACyD,EAAA,EAAD,KAEE3D,EAAAC,EAAAC,cAACsD,EAAA,EAAD,CAAKjB,GAAI,CAAEkB,SAAU,IACnBzD,EAAAC,EAAAC,cAAC0D,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,OAAnC,kBAIF9D,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAQV,MAAM,UAAUmB,QAdf,WACjBwC,GAAQ,KAaA,wBAINtD,EAAAC,EAAAC,cAACqB,EAAD,CACEW,QAASqB,EACTQ,kBAAgB,0BAChBV,KAAMA,GAENrD,EAAAC,EAAAC,cAAC8B,EAAD,CACEgC,GAAG,0BACH9B,QAASqB,GAFX,gBAMAvD,EAAAC,EAAAC,cAAC+D,EAAA,EAAD,CAAeC,UAAQ,GACrBlE,EAAAC,EAAAC,cAAC0D,EAAA,EAAD,CAAYO,cAAY,GAAxB,iQAIFnE,EAAAC,EAAAC,cAACkE,EAAA,EAAD,KACEpE,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAQgE,WAAS,EAACvD,QAASyC,GAA3B,yBCpFNe,EAAW,GACfC,aAAMC,GACHC,KAAK,SAACC,GAAD,OAAOA,EAAEC,SACdF,KAAK,SAACE,GACLL,EAAWK,EAAKC,MAAM,QAwIXC,MAtIf,WAAe,IAAAC,EACa5B,mBAAS,CACjC,CAAEzD,MAAO,QAASE,MAAO,CAAC,EAAG,EAAG,EAAG,EAAG,GAAIN,EAAG,GAC7C,CAAEI,MAAO,QAASE,MAAO,CAAC,EAAG,EAAG,EAAG,EAAG,GAAIN,EAAG,KAHlC0F,EAAAhE,OAAAqC,EAAA,EAAArC,CAAA+D,EAAA,GACNvF,EADMwF,EAAA,GACC9D,EADD8D,EAAA,GAKTC,EAAQ,GACRC,EAAS,GACTC,EAAO,GAELC,EAAK5F,EAAMO,IAAI,SAACsF,GAAD,OACnBpF,EAAAC,EAAAC,cAAChB,EAAD,CAAMK,MAAOA,EAAO0B,SAAUA,EAAUzB,MAAO4F,EAAK/F,MAiFtD,OACEW,EAAAC,EAAAC,cAAA,OAAKmF,UAAU,OACbrF,EAAAC,EAAAC,cAACoB,EAAD,MACC6D,EACDnF,EAAAC,EAAAC,cAACsD,EAAA,EAAD,CAAK8B,UAAU,UACbtF,EAAAC,EAAAC,cAACG,EAAA,EAAD,CACEwD,QAAQ,YACR/C,QA3DR,YA1BA,WACEkE,EAAQ,GACRC,EAAS,GACTC,EAAO,GACP,IAAIK,EAAI,GACRhG,EAAMiG,QAAQ,SAACJ,GACb,IAAK,IAAIK,EAAI,EAAGA,EAAI,EAAGA,IACA,GAAjBL,EAAKzF,MAAM8F,GACbP,EAAKtF,KAAKwF,EAAK3F,MAAMC,OAAO+F,IACF,GAAjBL,EAAKzF,MAAM8F,GACpBR,EAAOrF,KAAKwF,EAAK3F,MAAMC,OAAO+F,IAE9BT,EAAMpF,KAAK,CAACwF,EAAK3F,MAAMC,OAAO+F,GAAIA,MAIxC,IAAK,IAAIC,EAAI,EAAGA,EAAIR,EAAKS,OAAQD,IAC3BV,EAAMY,SAASV,EAAKQ,KAAOT,EAAOW,SAASV,EAAKQ,KAGlDH,EAAE3F,KAAKsF,EAAKQ,IAGhBR,EAAOK,EAIPM,GACA,IAAK,IAAIT,EAAO,EAAGA,EAAOd,EAASqB,OAAQP,IAAQ,CAEjD,IADA,IAAIU,GAAI,EACCJ,EAAI,EAAGA,EAAIR,EAAKS,OAAQD,IAC/B,GAAIpB,EAASc,GAAMQ,SAASV,EAAKQ,IAAK,CACpCI,GAAI,EACJ,MAGJ,IAAIA,EAAJ,CAGA,IAAK,IAAIC,EAAI,EAAGA,EAAId,EAAOU,OAAQI,IACjC,GAA0C,GAAtCzB,EAASc,GAAMQ,SAASX,EAAOc,IAAc,CAC/CD,GAAI,EACJ,MAGJ,IAAIA,EAAJ,CAGA,IAAK,IAAIJ,EAAI,EAAGA,EAAIV,EAAMW,OAAQD,IAChC,GAAIpB,EAASc,GAAM1F,OAAOsF,EAAMU,GAAG,KAAOV,EAAMU,GAAG,GAAI,CACrDI,GAAI,EACJ,MAGJ,IAAIA,EAAJ,CAGA,IAAK,IAAIE,EAAI,EAAGA,EAAIzG,EAAMoG,OAAQK,IAChC,GAAIzG,EAAMyG,GAAGvG,OAAS6E,EAASc,GAAO,CACpCU,GAAI,EACJ,MAGJ,IAAIA,EAAJ,CAGA7E,EAAQ,GAAAgF,OAAAlF,OAAAC,EAAA,EAAAD,CACHxB,GADG,CAEN,CAAEE,MAAO6E,EAASc,GAAOzF,MAAO,CAAC,EAAG,EAAG,EAAG,EAAG,GAAIN,EAAGE,EAAMoG,WAE5D,YAgBIrF,MAAO,CACLG,SAAU,QACVC,UAAW,QACXC,SAAU,QACVC,UAAW,QACXL,SAAU,OACV+E,UAAW,SACX3F,MAAO,SAETuG,kBAAgB,GAZlB,OAgBAlG,EAAAC,EAAAC,cAACG,EAAA,EAAD,CACEwD,QAAQ,YACR/C,QA3BR,WACEqF,OAAOC,SAASC,UA2BV/F,MAAO,CACLG,SAAU,QACVC,UAAW,QACXC,SAAU,QACVC,UAAW,QACXL,SAAU,OACV+E,UAAW,SACX3F,MAAO,SAETuG,kBAAgB,GAZlB,cC1HRI,IAASC,OACPvG,EAAAC,EAAAC,cAACF,EAAAC,EAAMuG,WAAP,KACExG,EAAAC,EAAAC,cAACuG,EAAD,OAEFC,SAASC,eAAe","file":"static/js/main.b4a48002.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/words.3381988a.txt\";","import React from \"react\";\r\nimport { Box } from \"@material-ui/core\";\r\nimport { Button } from \"@mui/material\";\r\n\r\nexport default function Word(props) {\r\n  let letters = [];\r\n  for (let i = 0; i < 5; i++) {\r\n    let tmp = [props.words[props.index].value.charAt(i)];\r\n    if (props.words[props.index].color[i] == 0) {\r\n      tmp.push(\"gray\");\r\n    } else if (props.words[props.index].color[i] == 1) {\r\n      tmp.push(\"yellow\");\r\n    } else {\r\n      tmp.push(\"green\");\r\n    }\r\n    tmp.push(i);\r\n    letters.push(tmp);\r\n  }\r\n  function handleClick(i) {\r\n    let tmp = [...props.words];\r\n    if (tmp[props.index].color[i] == 2) {\r\n      tmp[props.index].color[i] = 0\r\n    } else {\r\n      tmp[props.index].color[i] += 1\r\n    }\r\n    props.setWords(tmp)\r\n  }\r\n  const boxes = letters.map((letter) => (\r\n    <Box m={1}>\r\n      <Button\r\n        style={{\r\n          fontSize: \"63px\",\r\n          color: \"black\",\r\n          backgroundColor: letter[1],\r\n          maxWidth: \"100px\",\r\n          maxHeight: \"100px\",\r\n          minWidth: \"100px\",\r\n          minHeight: \"100px\",\r\n          margin: \"5\"\r\n        }}\r\n        onClick={() => handleClick(letter[2])}\r\n      >\r\n        {letter[0]}\r\n      </Button>\r\n    </Box>\r\n\r\n  ));\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n      }}\r\n    >\r\n      {boxes}\r\n    </div>\r\n  );\r\n}","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Button from \"@mui/material/Button\";\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Box from '@mui/material/Box';\r\nimport { styled } from \"@mui/material/styles\";\r\nimport Dialog from \"@mui/material/Dialog\";\r\nimport DialogTitle from \"@mui/material/DialogTitle\";\r\nimport DialogContent from \"@mui/material/DialogContent\";\r\nimport DialogActions from \"@mui/material/DialogActions\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Toolbar from '@mui/material/Toolbar';\r\n\r\nexport default function Instructions() {\r\n  const BootstrapDialog = styled(Dialog)(({ theme }) => ({\r\n    \"& .MuiDialogContent-root\": {\r\n      padding: theme.spacing(2),\r\n    },\r\n    \"& .MuiDialogActions-root\": {\r\n      padding: theme.spacing(1),\r\n    },\r\n  }));\r\n\r\n  const BootstrapDialogTitle = (props) => {\r\n    const { children, onClose, ...other } = props;\r\n\r\n    return (\r\n      <DialogTitle sx={{ m: 0, p: 2 }} {...other}>\r\n        {children}\r\n        {onClose ? (\r\n          <IconButton\r\n            aria-label=\"close\"\r\n            onClick={onClose}\r\n            sx={{\r\n              position: \"absolute\",\r\n              right: 8,\r\n              top: 8,\r\n              color: (theme) => theme.palette.grey[500],\r\n            }}\r\n          >\r\n            <CloseIcon />\r\n          </IconButton>\r\n        ) : null}\r\n      </DialogTitle>\r\n    );\r\n  };\r\n\r\n  BootstrapDialogTitle.propTypes = {\r\n    children: PropTypes.node,\r\n    onClose: PropTypes.func.isRequired,\r\n  };\r\n  const [open, setOpen] = React.useState(true);\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  }\r\n  return (\r\n    <div>\r\n      <Box sx={{ flexGrow: 1 }}>\r\n        <AppBar position=\"static\">\r\n          <Toolbar>\r\n\r\n            <Box sx={{ flexGrow: 1 }} >\r\n              <Typography variant=\"h6\" component=\"div\" >\r\n                Wordle Solver\r\n              </Typography>\r\n            </Box>\r\n            <Button color=\"inherit\" onClick={handleOpen}>Show Instructions</Button>\r\n          </Toolbar>\r\n        </AppBar>\r\n      </Box>\r\n      <BootstrapDialog\r\n        onClose={handleClose}\r\n        aria-labelledby=\"customized-dialog-title\"\r\n        open={open}\r\n      >\r\n        <BootstrapDialogTitle\r\n          id=\"customized-dialog-title\"\r\n          onClose={handleClose}\r\n        >\r\n          Instructions\r\n        </BootstrapDialogTitle>\r\n        <DialogContent dividers>\r\n          <Typography gutterBottom>\r\n            To use this wordle solver, first type in audio and crest into your wordle game. Then match the colors in the game with the solver, by clicking on each of the letters. After that, click the Add button to generate a prediction. Repeat this until you win.\r\n          </Typography>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button autoFocus onClick={handleClose}>\r\n            Start\r\n          </Button>\r\n        </DialogActions>\r\n      </BootstrapDialog>\r\n    </div>\r\n  );\r\n}","import TextField from \"@mui/material/TextField\";\r\nimport { Button } from \"@mui/material\";\r\nimport { FormGroup } from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport Word from \"./components/Word\";\r\nimport Instructions from \"./components/Instructions\";\r\nimport raw from \"./words.txt\";\r\nimport Box from '@mui/material/Box';\r\n\r\nlet allWords = [];\r\nfetch(raw)\r\n  .then((r) => r.text())\r\n  .then((text) => {\r\n    allWords = text.split(\"\\n\");\r\n  });\r\nfunction App() {\r\n  const [words, setWords] = useState([\r\n    { value: \"audio\", color: [0, 0, 0, 0, 0], i: 0 },\r\n    { value: \"crest\", color: [0, 0, 0, 0, 0], i: 1 },\r\n  ]);\r\n  let green = [];\r\n  let yellow = [];\r\n  let gray = [];\r\n\r\n  const wo = words.map((word) => (\r\n    <Word words={words} setWords={setWords} index={word.i} />\r\n  ));\r\n\r\n  function populateColors() {\r\n    green = [];\r\n    yellow = [];\r\n    gray = [];\r\n    let t = [];\r\n    words.forEach((word) => {\r\n      for (let j = 0; j < 5; j++) {\r\n        if (word.color[j] == 0) {\r\n          gray.push(word.value.charAt(j));\r\n        } else if (word.color[j] == 1) {\r\n          yellow.push(word.value.charAt(j));\r\n        } else {\r\n          green.push([word.value.charAt(j), j]);\r\n        }\r\n      }\r\n    });\r\n    for (let g = 0; g < gray.length; g++) {\r\n      if (green.includes(gray[g]) || yellow.includes(gray[g])) {\r\n        continue;\r\n      } else {\r\n        t.push(gray[g]);\r\n      }\r\n    }\r\n    gray = t;\r\n  }\r\n\r\n  function makePrediction() {\r\n    populateColors();\r\n    for (let word = 0; word < allWords.length; word++) {\r\n      let b = false;\r\n      for (let g = 0; g < gray.length; g++) {\r\n        if (allWords[word].includes(gray[g])) {\r\n          b = true;\r\n          break;\r\n        }\r\n      }\r\n      if (b) {\r\n        continue;\r\n      }\r\n      for (let y = 0; y < yellow.length; y++) {\r\n        if (allWords[word].includes(yellow[y]) == false) {\r\n          b = true;\r\n          break;\r\n        }\r\n      }\r\n      if (b) {\r\n        continue;\r\n      }\r\n      for (let g = 0; g < green.length; g++) {\r\n        if (allWords[word].charAt(green[g][1]) != green[g][0]) {\r\n          b = true;\r\n          break;\r\n        }\r\n      }\r\n      if (b) {\r\n        continue;\r\n      }\r\n      for (let w = 0; w < words.length; w++) {\r\n        if (words[w].value == allWords[word]) {\r\n          b = true;\r\n          break;\r\n        }\r\n      }\r\n      if (b) {\r\n        continue;\r\n      }\r\n      setWords([\r\n        ...words,\r\n        { value: allWords[word], color: [0, 0, 0, 0, 0], i: words.length },\r\n      ]);\r\n      break;\r\n    }\r\n  }\r\n\r\n  function restart() {\r\n    window.location.reload();\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Instructions />\r\n      {wo}\r\n      <Box textAlign=\"center\">\r\n        <Button\r\n          variant=\"contained\"\r\n          onClick={makePrediction}\r\n          style={{\r\n            maxWidth: \"250px\",\r\n            maxHeight: \"100px\",\r\n            minWidth: \"250px\",\r\n            minHeight: \"100px\",\r\n            fontSize: \"45px\",\r\n            textAlign: \"center\",\r\n            color: \"white\",\r\n          }}\r\n          disableElevation\r\n        >\r\n          Add\r\n        </Button>\r\n        <Button\r\n          variant=\"contained\"\r\n          onClick={restart}\r\n          style={{\r\n            maxWidth: \"250px\",\r\n            maxHeight: \"100px\",\r\n            minWidth: \"250px\",\r\n            minHeight: \"100px\",\r\n            fontSize: \"45px\",\r\n            textAlign: \"center\",\r\n            color: \"white\",\r\n          }}\r\n          disableElevation\r\n        >\r\n          Restart\r\n        </Button>\r\n      </Box>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}